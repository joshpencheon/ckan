# docker-compose build && docker-compose up -d
# If "docker-compose logs ckan" shows DB not ready, run "docker-compose restart ckan" a few times.
#
# Once running, set up publish db:
#
# docker exec -it datagovuk_publish bin/rails db:setup
#
#
version: "3"

volumes:
  ckan_config:
  ckan_home:
  ckan_storage:
  pg_data:
  solr_data:

services:
  ckan:
    container_name: ckan
    build:
      # context: ../../
      context: .
      args:
          - CKAN_SITE_URL=${CKAN_SITE_URL}
    links:
      - db
      - solr
      - redis
    depends_on:
      - db
    ports:
      - "0.0.0.0:${CKAN_PORT}:5000"
    environment:
      # Defaults work with linked containers, change to use own Postgres, SolR, Redis or Datapusher
      - CKAN_SQLALCHEMY_URL=postgresql://ckan:${POSTGRES_PASSWORD}@db/ckan
      - CKAN_DATASTORE_WRITE_URL=postgresql://ckan:${POSTGRES_PASSWORD}@db/datastore
      - CKAN_DATASTORE_READ_URL=postgresql://datastore_ro:${DATASTORE_READONLY_PASSWORD}@db/datastore
      - CKAN_SOLR_URL=http://solr:8983/solr/ckan
      - CKAN_REDIS_URL=redis://redis:6379/1
      - CKAN_DATAPUSHER_URL=http://datapusher:8800
      - CKAN_SITE_URL=${CKAN_SITE_URL}
      - CKAN_MAX_UPLOAD_SIZE_MB=${CKAN_MAX_UPLOAD_SIZE_MB}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - DS_RO_PASS=${DATASTORE_READONLY_PASSWORD}

    volumes:
      - ckan_config:/etc/ckan
      - ckan_home:/usr/lib/ckan
      - ckan_storage:/var/lib/ckan

  datapusher:
    container_name: datapusher
    image: clementmouchet/datapusher
    ports:
      - "8800:8800"

  db:
    container_name: db
    build:
      # context: ../../
      context: .
      dockerfile: contrib/docker/postgresql/Dockerfile
      args:
        - DS_RO_PASS=${DATASTORE_READONLY_PASSWORD}
        - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    environment:
      - DS_RO_PASS=${DATASTORE_READONLY_PASSWORD}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]

  solr:
    container_name: solr
    build:
      # context: ../../
      context: .
      dockerfile: contrib/docker/solr/Dockerfile
    volumes:
      - solr_data:/opt/solr/server/solr/ckan/data

  redis:
    container_name: redis
    image: redis:latest

  datagovuk_find:
    container_name: datagovuk_find
    build: ./datagovuk_find
    command: bash -c "rm -f tmp/pids/server.pid && bin/rails s -p 3000 -b '0.0.0.0'"
    # volumes:
    #   - .:/datagovuk_find
    ports:
      - "3000:3000"
    links:
      - elasticsearch
    environment:
      - ES_HOST=http://elasticsearch:9200

  datagovuk_publish:
    container_name: datagovuk_publish
    build: ./datagovuk_publish
    # command: bash -c "bin/rails db:setup && rm -f tmp/pids/server.pid && bin/rails s -p 3000 -b '0.0.0.0'"
    command: bash -c "rm -f tmp/pids/server.pid && bin/rails s -p 3000 -b '0.0.0.0'"
    # volumes:
    #   - .:/datagovuk_publish
    ports:
      - "3001:3000"
    depends_on:
      - db
    # links:
    #   - publish_db
    #   - publish_redis
    #   - publish_elasticsearch
    environment:
      - DATABASE_HOST=db
      - DATABASE_USER=ckan
      - DATABASE_PASSWORD=${POSTGRES_PASSWORD}
      - ES_HOST=http://elasticsearch:9200

  elasticsearch:
    image: elasticsearch:6.8.3
    environment:
      - discovery.type=single-node
    ports:
      - "9200:9200"
